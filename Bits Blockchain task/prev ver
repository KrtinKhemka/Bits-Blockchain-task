<!DOCTYPE html>
<html>
<head>
    <title>CONNECTION TO METAMASK</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <style>
        body {
            background-color: black;
            font-size: 33px;
            text-align: center;
        }
        button {
            background-color: white;
            font-size: 33px;
            font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
        }
        button:hover {
            background-color: yellow;
        }
				p{
					color: white;
				}
    </style>
</head>
<body>
	<button onclick="connectMetamask()">CONNECT TO METAMASK</button> <br>
	<p id="accountArea"></p>
	<button onclick="connectContract()">CONNECT TO CONTRACT</button> <br>
	<p id="contractArea"></p>
	<button onclick="deployContract()">DEPLOY CONTRACT</button> <br>
	<p id="ConfrirmationArea"></p>
	<button onclick="readContract()">GET DATA FROM CONTRACT</button> <br>
	<p id="dataArea"></p>
	<button onclick="loadQuestions()">Load qs</button> <br>
	<p id="questionset"></p>

  <script>
    //connect metamask
    let account;
    const connectMetamask = async() => {
      if(window.etheruem !== "undefined"){
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        account=accounts[0];
        document.getElementById("accountArea").innerHTML = account;

      }
      
    }
    // connecting smartcontract
    const connectContract= async() => {
      const ABI =[
	{
		"inputs": [],
		"name": "getlistofquest",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "keccakcount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "len",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "listofquesnos",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "randomnumber",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
            const Address = "0xC94d9C8deDEfAD93579ddAb68b77C708D2C11b1d";
            window.web3 = await new Web3(window.ethereum);
            window.contract = await new window.web3.eth.Contract( ABI, Address); 
            document.getElementById("contractArea").innerHTML = "connected to smart contract";
        }
				
     const deployContract= async () => {
				window.contract.methods.getlistofquest().send({from:account});
				document.getElementById("ConfrirmationArea").innerHTML=" Smart Contract Deployed"

				 
			 }
				
				// reading listof ques
				var newtmps=[];
        const readContract =async () => {
         // window.contract.methods.getlistofquest().send({from:account});
         

         
          const tmps = await Promise.all(
              Array(10)
              .fill()  
                  .map((element, index) => {
                   return  window.contract.methods.listofquesnos(index).call();
      })
  )
	document.getElementById("dataArea").innerHTML =tmps
	newtmps=tmps;
}
	// reading values from json
	
// printing values from questions
 
var allQuestions = new Array();
    
		function loadQuestions() {
			
			let xhttp = new XMLHttpRequest();
			xhttp.onreadystatechange= function(){
				if (xhttp.readyState == 4 && xhttp.status == 200){
					var data = JSON.parse(xhttp.responseText);
					
					const questions=[];
					for (let i = 0; i < 10; i++)  {
						var num=newtmps[i];
					var item= data.quiz[num-1];
					questions.push(item);
				
	}
	document.getElementById("questionset").innerHTML=questions;
	
				}else{
					document.getElementById("questionset").innerHTML="connectionerror";
				}
			}
			xhttp.open("GET","SampleQB.json",true);
			xhttp.send();



				// $.getJSON('question.json', function (data) {
				// 		allQuestions = data.quiz;
				// })
				// .error(function() {
				// 		console.log('error: JSON not loaded'); 
				// })
				// .done(function() {
				// 		console.log( "JSON loaded!" );
				// 		printQuestion(allQuestions[0]);
				// 		document.getElementById("questionset").innerHTML=allQuestions; 
				// });
		}
	var questions=[];
	for (var key in tmps) {
		var item= allQuestions[key-1];
		questions.push(item);
	}
	


			
// printing values from questions
// document.getElementById("questionset").innerHTML=questions;;
//   document.getElementById("dataArea").innerHTML =tmps;

          
//         }
// 			// reading values from json
// 			$.getJSON('SampleQB.json', function (json) {
// 			var questions = [];
// 			for (var key in tmps) {
// 			if (json.hasOwnProperty(key)) {
// 					var item = json[key];
// 					questions.push({
// 							item
// 					});            
// 			}
// 	}
// });
// // printing values from questions
// document.getElementById("questionset").innerHTML=questions;

      
    
  </script>

  </body>
  </html>